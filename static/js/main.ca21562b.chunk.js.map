{"version":3,"sources":["reducers/apiReducer/index.js","reducers/apiReducer/errorsReducer.js","reducers/apiReducer/loadingReducer.js","utils/actionUtil.js","reducers/index.js","reducers/aggregateDataReducer.js","actions/types.js","reducers/artistsReducer.js","reducers/artistStatsReducer.js","reducers/geniusArtistsReducer.js","reducers/genresReducer.js","reducers/loadedGenresReducer.js","reducers/selectedArtistReducer.js","reducers/selectedGenreReducer.js","providers/ReduxProvider.js","providers/ThemeProvider.js","api/metalGeniusAPI.js","actions/index.js","selectors/index.js","components/ArtistBubble.js","components/ArtistListItem.js","components/ArtistList.js","components/ArtistsLayout.js","components/Card.js","components/ArtistCard.js","components/LongestWordCard.js","components/WordCloud.js","components/VocabularySizeCard.js","components/ArtistDashboard.js","components/LoadingSpinner.js","components/ArtistDialog.js","components/GenresList.js","components/App.js","index.js"],"names":["combineReducers","errors","state","Map","action","type","payload","matches","exec","requestName","requestState","set","delete","loading","createRequestAction","createSuccessAction","createFailureAction","api","apiReducer","aggregateData","artists","keyBy","artistStats","id","geniusArtists","newEntries","merge","genres","ImmutableSet","Set","forEach","genre","add","loadedGenres","selectedArtist","selectedGenre","keys","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReduxProvider","children","theme","responsiveFontSizes","createMuiTheme","palette","primary","main","ThemeProvider","instance","axios","create","baseURL","selectArtist","createLoadingSelector","actions","isEmpty","some","get","getArtistsOfGenre","createSelector","filter","toList","sortBy","artist","useStyles","makeStyles","bubble","position","height","width","margin","borderRadius","border","cursor","breakpoints","down","transform","backgroundColor","opacity","background","zIndex","top","right","bottom","left","transition","title","textAlign","fontSize","avatar","connect","classes","geniusData","toString","Skeleton","className","variant","image_url","name","onClick","Typography","component","Avatar","alt","src","rowStyle","ListItem","style","ListItemAvatar","ListItemText","button","list","paper","listElement","createRef","useEffect","current","scrollTo","RowItem","index","key","itemCount","size","itemSize","ref","root","display","alignItems","mobileContainer","paddingBottom","row","justifyContent","wrapper","fetchGeniusArtists","dispatch","getState","has","ids","getArtistsGeniusData","map","toJS","then","data","catch","error","mobileLayout","renderRow","Container","maxWidth","clsx","ArtistList","rows","push","slice","renderBubbleLayout","header","content","flexDirection","Card","CardHeader","CardContent","dark","ArtistCard","url","Link","href","word","color","fontWeight","typography","minHeight","skeleton","LongestWordCard","useState","loadingDef","setLoadingDef","definition","setDefinition","fetch","response","json","Array","isArray","meaning","partsOfSpeechKeys","Object","length","firstMeaning","firstDefinition","Chip","label","minSize","options","fontSizes","colors","WordCloud","words","shadowArc","arc","text","description","icon","percentText","GreenUpArrow","props","green","RedDownArrow","red","VocabularySizeCard","averageSize","progress","setProgress","progressElement","useRef","moreThanAverage","comparison","Icon","percentDifference","Math","round","abs","timeout","setTimeout","clearTimeout","svgStyle","firstChild","strokeDashoffset","CircularProgress","value","thickness","flexGrow","marginTop","rowItem","padding","ArtistDashboard","stats","averageVocabulary","wordCounts","longestWord","vocabularySize","Grid","container","spacing","item","xs","sm","md","lg","xl","Paper","LoadingSpinner","useTheme","appBar","Transition","React","forwardRef","Slide","direction","loadingSelector","fetchArtistAnalysis","getArtistAnalysis","handleClose","Dialog","fullScreen","open","Boolean","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","listItem","listStyle","unselectedItem","selectedItem","textDecoration","selectGenre","up","fetchArtists","fetchAggregateData","useMobileLayout","useMediaQuery","AppContainer","StrictMode","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca21562b.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport errorsReducer from './errorsReducer';\r\nimport loadingReducer from './loadingReducer';\r\n\r\nexport default combineReducers({\r\n    errors: errorsReducer,\r\n    loading: loadingReducer\r\n});","import { Map } from 'immutable';\r\n\r\nexport default (state = Map(), action) => {\r\n    const { type, payload } = action;\r\n    const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\r\n\r\n    if (!matches) return state;\r\n\r\n    const [, requestName, requestState] = matches;\r\n\r\n    if (requestState === 'FAILURE') {\r\n        return state.set(requestName, payload);\r\n    } else {\r\n        return state.delete(requestName);\r\n    }\r\n};","import { Map } from 'immutable';\r\n\r\nexport default (state = Map(), action) => {\r\n    const { type } = action;\r\n    const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\r\n\r\n    if (!matches) return state;\r\n\r\n    const [, requestName, requestState] = matches;\r\n\r\n    return state.set(requestName, requestState === 'REQUEST');\r\n};","export const createRequestAction = (action) => {\r\n    return `${action}_REQUEST`;\r\n};\r\n\r\nexport const createSuccessAction = (action) => {\r\n    return `${action}_SUCCESS`;\r\n};\r\n\r\nexport const createFailureAction = (action) => {\r\n    return `${action}_FAILURE`;\r\n};","import { combineReducers } from 'redux';\r\nimport apiReducer from './apiReducer';\r\nimport aggregateDataReducer from './aggregateDataReducer';\r\nimport artistsReducer from './artistsReducer';\r\nimport artistStatsReducer from './artistStatsReducer';\r\nimport geniusArtistsReducer from './geniusArtistsReducer';\r\nimport genresReducer from './genresReducer';\r\nimport loadedGenresReducer from './loadedGenresReducer';\r\nimport selectedArtistReducer from './selectedArtistReducer';\r\nimport selectedGenreReducer from './selectedGenreReducer';\r\n\r\nexport default combineReducers({\r\n    api: apiReducer,\r\n    aggregateData: aggregateDataReducer,\r\n    artists: artistsReducer,\r\n    artistStats: artistStatsReducer,\r\n    geniusArtists: geniusArtistsReducer,\r\n    genres: genresReducer,\r\n    loadedGenres: loadedGenresReducer,\r\n    selectedArtist: selectedArtistReducer,\r\n    selectedGenre: selectedGenreReducer\r\n});","import { FETCH_AGGREGATE_DATA } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_AGGREGATE_DATA):\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","export const FETCH_SAMPLE_ARTISTS = 'FETCH_SAMPLE_ARTISTS';\r\nexport const FETCH_AGGREGATE_DATA = 'FETCH_AGGREGATE_DATA';\r\nexport const FETCH_ARTIST_ANALYSIS = 'FETCH_ARTIST_ANALYSIS';\r\nexport const FETCH_GENIUS_ARTISTS = 'FETCH_GENIUS_ARTISTS';\r\nexport const SELECT_GENRE = 'SELECT_GENRE';\r\nexport const LOAD_GENRE = 'LOAD_GENRE';\r\nexport const SELECT_ARTIST = 'SELECT_ARTIST';","import { Map } from 'immutable';\r\nimport { keyBy } from 'lodash';\r\nimport { FETCH_SAMPLE_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            return Map(keyBy(action.payload, 'id'));\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Map } from 'immutable';\r\nimport { FETCH_ARTIST_ANALYSIS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_ARTIST_ANALYSIS):\r\n            return state.set(action.payload.id, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Map } from 'immutable';\r\nimport { keyBy } from 'lodash';\r\nimport { FETCH_GENIUS_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_GENIUS_ARTISTS):\r\n            const newEntries = Map(keyBy(action.payload, 'id'));\r\n            return state.merge(newEntries);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Set as ImmutableSet } from 'immutable';\r\nimport { FETCH_SAMPLE_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = ImmutableSet(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            const genres = new Set();\r\n            action.payload.forEach(({ genre }) => genres.add(genre));\r\n\r\n            return ImmutableSet(genres);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Set } from 'immutable';\r\nimport { LOAD_GENRE } from '../actions/types';\r\n\r\nexport default (state = Set(), action) => {\r\n    switch (action.type) {\r\n        case LOAD_GENRE:\r\n            return state.add(action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { SELECT_ARTIST } from '../actions/types';\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n        case SELECT_ARTIST:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { FETCH_SAMPLE_ARTISTS, SELECT_GENRE } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            const genres = new Set();\r\n            action.payload.forEach(({ genre }) => genres.add(genre));\r\n\r\n            for (const genre of genres.keys()) {\r\n                return genre;\r\n            }\r\n            break;\r\n        case SELECT_GENRE:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from '../reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    reducers, \r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport const ReduxProvider = ({ children }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            {children}\r\n        </Provider>\r\n    );\r\n};","import React from 'react';\r\nimport { \r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n    ThemeProvider as MuiThemeProvider\r\n} from '@material-ui/core/styles';\r\n\r\nconst theme = responsiveFontSizes(createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#bb86fc'\r\n        }\r\n    }\r\n}));\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n    return (\r\n        <MuiThemeProvider theme={theme}>\r\n            {children}\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nexport default ThemeProvider;","import axios from 'axios';\r\n\r\nconst baseURL = process.env.NODE_ENV === 'production' ? (\r\n    'https://metal-genius.herokuapp.com/'\r\n) : (\r\n    'http://localhost:3001'\r\n);\r\n\r\nconst instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport const getSampleArtists = () => {\r\n    return instance.get('/sample');\r\n};\r\n\r\nexport const getAggregateData = () => {\r\n    return instance.get('/artists/aggregate');\r\n};\r\n\r\nexport const getArtistsGeniusData = (ids) => {\r\n    return instance.get(`/artists/${ids}`);\r\n};\r\n\r\nexport const getArtistAnalysis = (id) => {\r\n    return instance.get(`/artists/${id}/lyrics`);\r\n};","import {\r\n    FETCH_SAMPLE_ARTISTS,\r\n    FETCH_AGGREGATE_DATA,\r\n    FETCH_ARTIST_ANALYSIS,\r\n    FETCH_GENIUS_ARTISTS,\r\n    LOAD_GENRE,\r\n    SELECT_GENRE,\r\n    SELECT_ARTIST\r\n} from './types';\r\n\r\nimport { \r\n    getSampleArtists,\r\n    getAggregateData,\r\n    getArtistsGeniusData,\r\n    getArtistAnalysis\r\n} from '../api/metalGeniusAPI';\r\n\r\nimport {\r\n    createRequestAction,\r\n    createSuccessAction,\r\n    createFailureAction\r\n} from '../utils/actionUtil';\r\n\r\nexport const fetchArtists = () => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_SAMPLE_ARTISTS) });\r\n\r\n    getSampleArtists()\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_SAMPLE_ARTISTS),\r\n            payload: data\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_SAMPLE_ARTISTS),\r\n            payload: 'There was an issue loading artist information.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const fetchAggregateData = () => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_AGGREGATE_DATA) });\r\n\r\n    getAggregateData()\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_AGGREGATE_DATA),\r\n            payload: data[0]\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_AGGREGATE_DATA),\r\n            payload: 'There was an issue loading aggregate artist data.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const fetchGeniusArtists = (artists) => (dispatch, getState) => {\r\n\r\n    const { selectedGenre, loadedGenres } = getState();\r\n\r\n    if (!loadedGenres.has(selectedGenre)) {\r\n        dispatch({ type: createRequestAction(FETCH_GENIUS_ARTISTS) });\r\n        dispatch({ type: LOAD_GENRE, payload: selectedGenre });\r\n\r\n        const ids = artists.map(({ id }) => id);\r\n\r\n        getArtistsGeniusData(ids.toJS())\r\n        .then(({ data }) => {\r\n            dispatch({\r\n                type: createSuccessAction(FETCH_GENIUS_ARTISTS),\r\n                payload: data\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: createFailureAction(FETCH_GENIUS_ARTISTS),\r\n                payload: 'There was an issue getting Genius artist data.'\r\n            })\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchArtistAnalysis = (id) => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_ARTIST_ANALYSIS) });\r\n\r\n    getArtistAnalysis(id)\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_ARTIST_ANALYSIS),\r\n            payload: data\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_ARTIST_ANALYSIS),\r\n            payload: 'There was an issue getting lyrical data.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const selectGenre = (genre) => {\r\n    return {\r\n        type: SELECT_GENRE,\r\n        payload: genre\r\n    };\r\n};\r\n\r\nexport const selectArtist = (id) => {\r\n    return {\r\n        type: SELECT_ARTIST,\r\n        payload: id\r\n    };\r\n};","import { createSelector } from 'reselect';\r\n\r\n/* API Util */\r\n\r\nexport const createLoadingSelector = (actions) => (state) => {\r\n\r\n    // special case where the app is first loading and for the first\r\n    // render the loading reducer is empty\r\n    if (state.api.loading.isEmpty()) { return true; }\r\n\r\n    // returns true if one of the actions supplied is in the loading state\r\n    return actions.some(action => state.api.loading.get(action));\r\n};\r\n\r\n/* Selectors */\r\n\r\nconst getSelectedGenre = (state) => state.selectedGenre;\r\nconst getArtists = (state) => state.artists;\r\n\r\nexport const getArtistsOfGenre = createSelector(\r\n    [ getSelectedGenre, getArtists ],\r\n    (selectedGenre, artists) => {\r\n        const artistsList = artists.filter(({ genre }) => genre === selectedGenre).toList();\r\n        return artistsList.sortBy(({ artist }) => artist);\r\n    }\r\n);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Typography } from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport { selectArtist } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    bubble: {\r\n        position: 'relative',\r\n        height: 100,\r\n        width: 100,\r\n        margin: 8,\r\n        borderRadius: '50%',\r\n        border: '2px solid gray',\r\n        cursor: 'pointer',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)'\r\n        },\r\n        '&:hover > div': {\r\n            backgroundColor: 'rgba(0,0,0,0.7)',\r\n        },\r\n        '&:hover > span': {\r\n            opacity: 1\r\n        }\r\n    },\r\n    background: {\r\n        zIndex: 1,\r\n        borderRadius: '50%',\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        backgroundColor: 'rgba(0,0,0,0.0)',\r\n        transition: 'background-color 0.3s ease-in-out'\r\n    },\r\n    title: {\r\n        opacity: 0,\r\n        zIndex: 2,\r\n        textAlign: 'center',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        fontSize: '0.8rem',\r\n        transition: 'opacity 0.3s ease-in-out'\r\n    },\r\n    avatar: {\r\n        height: '100%',\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst ArtistBubble = ({\r\n    // props\r\n    id,\r\n    artists,\r\n\r\n    // actions\r\n    selectArtist\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const geniusData = artists.get(id.toString());\r\n\r\n    if (!geniusData) {\r\n        return <Skeleton className={classes.bubble} variant=\"circle\" />;\r\n    }\r\n\r\n    const handleClick = () => {\r\n        selectArtist(id);\r\n    };\r\n\r\n    const {\r\n        image_url,\r\n        name\r\n    } = geniusData;\r\n\r\n    return (\r\n        <div\r\n            className={classes.bubble}\r\n            onClick={handleClick}\r\n        >\r\n            <div \r\n                className={classes.background}\r\n            >\r\n            </div>\r\n            <Typography\r\n                component=\"span\"\r\n                className={classes.title}\r\n            >\r\n                {name}\r\n            </Typography>\r\n            <Avatar\r\n                className={classes.avatar}\r\n                alt={name}\r\n                src={image_url}\r\n            >\r\n                &nbsp;\r\n            </Avatar>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ geniusArtists }) => {\r\n    return {\r\n        artists: geniusArtists\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { selectArtist }\r\n)(ArtistBubble);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Avatar\r\n} from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport { selectArtist } from '../actions';\r\n\r\nconst ArtistListItem = ({\r\n    // props\r\n    id,\r\n    rowStyle,\r\n    artists,\r\n\r\n    // actions\r\n    selectArtist\r\n}) => {\r\n\r\n    const geniusData = artists.get(id.toString());\r\n\r\n    if (!geniusData) {\r\n        return (\r\n            <ListItem style={rowStyle}>\r\n                <ListItemAvatar>\r\n                    <Skeleton\r\n                        variant=\"circle\"\r\n                        height={40}\r\n                        width={40}\r\n                    />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={<Skeleton variant=\"text\" />}\r\n                />\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n    const handleClick = () => {\r\n        selectArtist(id);\r\n    };\r\n\r\n    const {\r\n        image_url,\r\n        name\r\n    } = geniusData;\r\n\r\n    return (\r\n        <ListItem\r\n            style={rowStyle}\r\n            button\r\n            onClick={handleClick}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar\r\n                    src={image_url}\r\n                    alt={name}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={name}\r\n            />\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ geniusArtists }) => {\r\n    return {\r\n        artists: geniusArtists\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectArtist })(ArtistListItem);","import React, { useEffect, createRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FixedSizeList as List } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport ArtistListItem from './ArtistListItem';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: 8\r\n    }\r\n}));\r\n\r\nconst VirtualizedList = ({\r\n    artists,\r\n    genre\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const listElement = createRef();\r\n\r\n    useEffect(() => {\r\n        if (listElement && listElement.current) {\r\n            listElement.current.scrollTo(0);\r\n        }\r\n    }, [genre, listElement]);\r\n\r\n    const RowItem = ({ index, style }) => {\r\n\r\n        const { id } = artists.get(index);\r\n\r\n        return (\r\n            <ArtistListItem\r\n                key={index}\r\n                rowStyle={style}\r\n                id={id}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <AutoSizer>\r\n            {({ height, width }) => (\r\n                <List\r\n                    className={classes.list}\r\n                    height={height}\r\n                    width={width}\r\n                    itemCount={artists.size}\r\n                    itemSize={56}\r\n\r\n                    // get the list element to reset scroll position\r\n                    // when genre selection changes\r\n                    ref={listElement}\r\n                >\r\n                    {RowItem}\r\n                </List>\r\n            )}\r\n        </AutoSizer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedGenre }) => {\r\n    return {\r\n        genre: selectedGenre\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(VirtualizedList);","import React, { useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\nimport ArtistBubble from './ArtistBubble';\r\nimport ArtistList from './ArtistList';\r\nimport { fetchGeniusArtists } from '../actions';\r\nimport { getArtistsOfGenre } from '../selectors';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        [theme.breakpoints.down('xs')]: {\r\n            // the genre menu is 150px in height\r\n            height: 'calc(100% - 150px)'\r\n        }\r\n    },\r\n    mobileContainer: {\r\n        height: '100%',\r\n        paddingBottom: 16\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    avatar: {\r\n        height: 100,\r\n        width: 100,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)'\r\n        }\r\n    },\r\n    wrapper: {\r\n        height: 100,\r\n        width: 100,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        margin: 4,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        borderRadius: '50%',\r\n        transition: 'all .2s',\r\n        '&:hover': {\r\n            height: 110,\r\n            width: 110,\r\n            [theme.breakpoints.down('sm')]: {\r\n                height: 55,\r\n                width: 55\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\n/**\r\n *  This component arranges the given list of artists\r\n *  in a circle shaped grid of bubbles. It is hardcoded to accept\r\n *  5 rows totalling 21 bubbles (3 bubbles in the top and bottom, 5 bubbles else).\r\n * \r\n * TODO: Accept any some number of artists and arrange them in a circle grid. Or add\r\n * TODO: some pagination capability.\r\n */\r\nconst ArtistsLayout = ({\r\n    // props\r\n    mobileLayout = false,\r\n    artists,\r\n    genre,\r\n\r\n    // actions\r\n    fetchGeniusArtists\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        fetchGeniusArtists(artists)\r\n    }, [genre, fetchGeniusArtists, artists])\r\n\r\n    const renderBubbleLayout = () => {\r\n        const rows = [];\r\n\r\n        // sanity check, there should be exactly 21 artists\r\n        if (artists.size === 21) {\r\n            rows.push(renderRow(artists.slice(0, 3), 0));\r\n            rows.push(renderRow(artists.slice(3, 8), 1));\r\n            rows.push(renderRow(artists.slice(8, 13), 2));\r\n            rows.push(renderRow(artists.slice(13, 18), 3));\r\n            rows.push(renderRow(artists.slice(18), 4));\r\n        }\r\n\r\n        return rows;\r\n    };\r\n\r\n    const renderRow = (artists, row) => {\r\n        return (\r\n            <div key={row} className={classes.row}>\r\n                {artists.map(({ id }) => (\r\n                    <ArtistBubble\r\n                        key={id}\r\n                        id={id}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container\r\n                maxWidth=\"lg\"\r\n                className={clsx({\r\n                    [classes.mobileContainer]: mobileLayout\r\n                })}\r\n            >\r\n                {mobileLayout ? (\r\n                    <ArtistList artists={artists} />\r\n                ) : (\r\n                    renderBubbleLayout()\r\n                )}\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        artists: getArtistsOfGenre(state),\r\n        genre: state.selectedGenre\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchGeniusArtists })(ArtistsLayout);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Card as MuiCard,\r\n    CardHeader,\r\n    CardContent\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        height: '20%',\r\n        textAlign: 'center',\r\n        backgroundColor: theme.palette.primary.main\r\n    },\r\n    content: {\r\n        height: '80%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\nconst Card = ({\r\n    title,\r\n    content\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MuiCard>\r\n            <CardHeader \r\n                className={classes.header}\r\n                title={title}\r\n            />\r\n            <CardContent className={classes.content}>\r\n                {content}\r\n            </CardContent>\r\n        </MuiCard>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Avatar,\r\n    Typography,\r\n    Link\r\n} from '@material-ui/core';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        border: `2px solid ${theme.palette.primary.dark}`,\r\n        height: 150,\r\n        width: 150\r\n    }\r\n}));\r\n\r\nconst ArtistCard = ({\r\n    artist\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const { \r\n        name,\r\n        image_url,\r\n        url\r\n    } = artist;\r\n\r\n    return (\r\n        <Card\r\n            title={name}\r\n            content={\r\n                <>\r\n                    <Avatar\r\n                        className={classes.avatar}\r\n                        src={image_url}\r\n                        variant=\"circle\"\r\n                    />\r\n                    <div>\r\n                        <Typography>\r\n                            <Link href={url}>\r\n                                Genius Profile\r\n                            </Link>\r\n                        </Typography>\r\n                    </div>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default ArtistCard;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Chip,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    word: {\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    },\r\n    typography: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        maxWidth: 400,\r\n        minHeight: 100,\r\n    },\r\n    skeleton: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst LongestWordCard = ({\r\n    word\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const [loadingDef, setLoadingDef] = useState(true);\r\n    const [definition, setDefinition] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch(`https://api.dictionaryapi.dev/api/v1/entries/en/${word}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (Array.isArray(data)) {\r\n                const [{ meaning }] = data;\r\n                const partsOfSpeechKeys = Object.keys(meaning);\r\n\r\n                if (partsOfSpeechKeys.length > 0) {\r\n                    const firstMeaning = meaning[partsOfSpeechKeys[0]];\r\n\r\n                    if (firstMeaning.length > 0) {\r\n                        const firstDefinition = firstMeaning[0].definition;\r\n                        setDefinition(firstDefinition);\r\n                    }\r\n                }\r\n            }\r\n\r\n            setLoadingDef(false);\r\n        });\r\n    }, [word]);\r\n\r\n    return (\r\n        <Card\r\n            title=\"Longest Word\"\r\n            content={\r\n                <>\r\n                    <Chip\r\n                        className={classes.word}\r\n                        color=\"primary\"\r\n                        label={word}\r\n                    />\r\n\r\n                    <Typography\r\n                        className={classes.typography}\r\n                        variant=\"body1\"\r\n                    >\r\n                        {loadingDef ? (\r\n                            <>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                            </>\r\n                        ) : (\r\n                            definition\r\n                        )}\r\n                    </Typography>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default LongestWordCard;","import React from 'react';\r\nimport ReactWordCloud from 'react-wordcloud';\r\n\r\nconst colors = [\r\n    '#BB86FC',\r\n    '#3C91E6',\r\n    '#30C5FF',\r\n    '#553739'\r\n];\r\n\r\nconst minSize = [500, 300];\r\nconst options = {\r\n    fontSizes: [10, 80],\r\n    colors\r\n};\r\n\r\nconst WordCloud = ({\r\n    title, words\r\n}) => {\r\n\r\n    return (\r\n        <ReactWordCloud\r\n            key={title}\r\n            words={words}\r\n            minSize={minSize}\r\n            options={options}\r\n        />\r\n    );\r\n};\r\n\r\nexport default WordCloud;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, CircularProgress } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    content: {\r\n        position: 'relative',\r\n        height: 225,\r\n        width: 225,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        textAlign: 'center'\r\n    },\r\n    shadowArc: {\r\n        position: 'absolute',\r\n        color: '#424242',\r\n        zIndex: 1\r\n    },\r\n    arc: {\r\n        position: 'absolute',\r\n        zIndex: 2\r\n    },\r\n    text: {\r\n        zIndex: 3\r\n    },\r\n    description: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        zIndex: 3\r\n    },\r\n    icon: {\r\n        height: '0.85em'\r\n    },\r\n    percentText: {\r\n        fontSize: '0.85rem'\r\n    }\r\n}));\r\n\r\nconst GreenUpArrow = (props) => {\r\n    return (\r\n        <KeyboardArrowUpIcon\r\n            style={{ color: green[500] }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst RedDownArrow = (props) => {\r\n    return (\r\n        <KeyboardArrowDownIcon\r\n            style={{ color: red[500] }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst VocabularySizeCard = ({\r\n    size,\r\n    averageSize\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = useState(0);\r\n    const progressElement = useRef(null);\r\n    const moreThanAverage = size > averageSize ? true : false;\r\n    const comparison = moreThanAverage ? 'more' : 'less';\r\n    const Icon = moreThanAverage ? GreenUpArrow : RedDownArrow;\r\n    const percentDifference = Math.round((Math.abs(size - averageSize) / averageSize) * 100);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setProgress(percentDifference);\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearTimeout(timeout);\r\n        }\r\n    }, [percentDifference]);\r\n\r\n    useEffect(() => {\r\n        if (!moreThanAverage && progressElement) {\r\n            // better way to do this?\r\n            const svgStyle = progressElement.current.firstChild.firstChild.style;\r\n            if (svgStyle.strokeDashoffset[0] !== '-') {\r\n                svgStyle.strokeDashoffset = '-' + svgStyle.strokeDashoffset;\r\n            }\r\n        }\r\n    }, [moreThanAverage, progress]);\r\n\r\n    const renderProgressBars = () => {\r\n        return (\r\n            <>\r\n                <CircularProgress\r\n                    className={classes.shadowArc}\r\n                    variant=\"static\"\r\n                    value={100}\r\n                    size=\"100%\"\r\n                    thickness={1.5}\r\n                />\r\n                <CircularProgress\r\n                    ref={progressElement}\r\n                    className={classes.arc}\r\n                    variant=\"static\"\r\n                    value={progress}\r\n                    size=\"100%\"\r\n                    thickness={1.5}\r\n                />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <>\r\n                <Typography\r\n                    className={classes.text}\r\n                    variant=\"h3\"\r\n                >\r\n                    {size}\r\n                </Typography>\r\n                <div className={classes.description}>\r\n                    <Icon \r\n                        classes={{\r\n                            root: classes.icon\r\n                        }}\r\n                    />\r\n                    <Typography\r\n                        className={classes.percentText}\r\n                        variant=\"body1\"\r\n                    >\r\n                        {`${percentDifference}% ${comparison} than average`}\r\n                    </Typography>\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            title=\"Vocabulary Size\"\r\n            content={\r\n                <>\r\n                    <div className={classes.content}>\r\n                        {renderProgressBars()}\r\n                        {renderContent()}\r\n                    </div>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default VocabularySizeCard;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Grid, Paper } from '@material-ui/core';\r\nimport ArtistCard from './ArtistCard';\r\nimport LongestWordCard from './LongestWordCard';\r\nimport WordCloud from './WordCloud';\r\nimport VocabularySizeCard from './VocabularySizeCard';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 32\r\n    },\r\n    rowItem: {\r\n        height: 350,\r\n        '& > div': {\r\n            height: '100%',\r\n            backgroundColor: '#585858'\r\n        },\r\n    },\r\n    paper: {\r\n        padding: 4,\r\n        textAlign: 'center',\r\n    }\r\n}));\r\n\r\nconst ArtistDashboard = ({\r\n    aggregateData,\r\n    artist,\r\n    stats\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const { averageVocabulary } = aggregateData;\r\n    const { name } = artist;\r\n    const { wordCounts, longestWord, vocabularySize } = stats;\r\n    const words = wordCounts.map(([text, value]) => ({ text, value }));\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\">\r\n            <Grid container spacing={2}>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <ArtistCard\r\n                        artist={artist}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <LongestWordCard\r\n                        word={longestWord}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <VocabularySizeCard\r\n                        size={vocabularySize}\r\n                        averageSize={averageVocabulary}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <WordCloud\r\n                            title={name}\r\n                            words={words}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ArtistDashboard;","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ScaleLoader from 'react-spinners/ScaleLoader';\r\n//import { CircularProgress } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\nconst LoadingSpinner = () => {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ScaleLoader\r\n                loading={true}\r\n                height={50}\r\n                width={10}\r\n                color={theme.palette.primary.main}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Slide\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ArtistDashboard from './ArtistDashboard';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { selectArtist, fetchArtistAnalysis } from '../actions';\r\nimport { FETCH_ARTIST_ANALYSIS } from '../actions/types';\r\nimport { createLoadingSelector } from '../selectors';\r\n\r\nconst useStyles = makeStyles({\r\n    appBar: {\r\n        position: 'fixed'\r\n    },\r\n    content: {\r\n        height: '100%'\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst ArtistDialog = ({\r\n    // props\r\n    loading,\r\n    id,\r\n    aggregateData,\r\n    artist,\r\n    stats,\r\n\r\n    // actions\r\n    selectArtist,\r\n    fetchArtistAnalysis\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            // otherwise we've fetched the lyrics already\r\n            if (!stats) {\r\n                fetchArtistAnalysis(id);\r\n            }\r\n        }\r\n    }, [id, stats, fetchArtistAnalysis]);\r\n\r\n    const handleClose = () => {\r\n        selectArtist('');\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            fullScreen\r\n            open={Boolean(id)}\r\n            onClose={handleClose}\r\n            TransitionComponent={Transition}\r\n        >\r\n            <AppBar\r\n                className={classes.appBar}\r\n                color=\"default\"\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            \r\n            {\r\n                Boolean(id) &&\r\n                <div className={classes.content}>\r\n                    {loading ? (\r\n                        <LoadingSpinner />\r\n                    ) : (\r\n                        <ArtistDashboard\r\n                            aggregateData={aggregateData}\r\n                            artist={artist}\r\n                            stats={stats}\r\n                        />\r\n                    )}\r\n                </div>\r\n            }\r\n        </Dialog>\r\n    )\r\n};\r\n\r\nconst loadingSelector = createLoadingSelector([FETCH_ARTIST_ANALYSIS]);\r\nconst mapStateToProps = (state) => {\r\n\r\n    const {\r\n        selectedArtist,\r\n        aggregateData,\r\n        geniusArtists,\r\n        artistStats\r\n    } = state;\r\n\r\n    return {\r\n        loading: loadingSelector(state),\r\n        id: selectedArtist,\r\n        aggregateData,\r\n        artist: geniusArtists.get(selectedArtist.toString()),\r\n        stats: artistStats.get(selectedArtist.toString())\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { selectArtist, fetchArtistAnalysis }\r\n)(ArtistDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { selectGenre } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    container: {\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: 150\r\n        }\r\n    },\r\n    list: {\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        margin: 0,\r\n        padding: 0,\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: '100%',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n    },\r\n    listItem: {\r\n        listStyle: 'none',\r\n        fontSize: '1rem',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '0.65rem'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            paddingBottom: 8\r\n        }\r\n    },\r\n    unselectedItem: {\r\n        cursor: 'pointer',\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.3)'\r\n        }\r\n    },\r\n    selectedItem: {\r\n        transform: 'scale(1.3)',\r\n        fontWeight: 'bold',\r\n        textDecoration: 'underline'\r\n    }\r\n}));\r\n\r\nconst GenresList = ({\r\n    // props\r\n    selectedGenre,\r\n    genres,\r\n\r\n    // actions\r\n    selectGenre\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderList = () => {\r\n        return genres.map(genre => (\r\n            <Typography\r\n                key={genre}\r\n                className={clsx({\r\n                    [classes.listItem]: true,\r\n                    [classes.unselectedItem]: genre !== selectedGenre,\r\n                    [classes.selectedItem]: genre === selectedGenre\r\n                })}\r\n                component=\"li\"\r\n                onClick={() => selectGenre(genre)}\r\n            >\r\n                {genre}\r\n            </Typography>\r\n        ))\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <ul className={classes.list}>\r\n                {renderList()}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedGenre, genres }) => {\r\n    return {\r\n        selectedGenre,\r\n        genres\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectGenre })(GenresList);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery } from '@material-ui/core';\nimport { fetchArtists, fetchAggregateData } from '../actions';\nimport { FETCH_SAMPLE_ARTISTS, FETCH_AGGREGATE_DATA } from '../actions/types';\nimport { createLoadingSelector } from '../selectors';\nimport ArtistsLayout from './ArtistsLayout';\nimport ArtistDialog from './ArtistDialog';\nimport GenresList from './GenresList';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        [theme.breakpoints.up('xs')]: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-evenly'\n        }\n    }\n}));\n\nconst App = ({\n    // props\n    loading,\n\n    // actions\n    fetchArtists,\n    fetchAggregateData\n}) => {\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const useMobileLayout = useMediaQuery(theme.breakpoints.down('xs'));\n\n    useEffect(() => {\n        fetchArtists();\n        fetchAggregateData();\n    }, [fetchArtists, fetchAggregateData]);\n\n    return (\n        <div className={classes.root}>\n            {loading ? (\n                <LoadingSpinner />\n            ) : (\n                <>\n                    <GenresList />\n                    <ArtistsLayout\n                        mobileLayout={useMobileLayout}\n                    />\n                    <ArtistDialog />\n                </>\n            )}\n        </div>\n    );\n};\n\nconst loadingSelector = createLoadingSelector([FETCH_SAMPLE_ARTISTS, FETCH_AGGREGATE_DATA]);\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: loadingSelector(state)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { fetchArtists, fetchAggregateData }\n)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ReduxProvider } from './providers/ReduxProvider';\nimport ThemeProvider from './providers/ThemeProvider';\nimport App from './components/App';\n\nconst AppContainer = () => {\n    return (\n        <React.StrictMode>\n            <ReduxProvider>\n                <ThemeProvider>\n                    <CssBaseline />\n                    <App />\n                </ThemeProvider>\n            </ReduxProvider>\n        </React.StrictMode>\n    );\n};\n\nReactDOM.render(\n    <AppContainer />,\n    document.getElementById('root')\n);"],"sourceRoot":""}