{"version":3,"sources":["reducers/apiReducer/index.js","reducers/apiReducer/errorsReducer.js","reducers/apiReducer/loadingReducer.js","utils/actionUtil.js","reducers/index.js","reducers/aggregateDataReducer.js","actions/types.js","reducers/artistsReducer.js","reducers/artistStatsReducer.js","reducers/geniusArtistsReducer.js","reducers/genresReducer.js","reducers/loadedGenresReducer.js","reducers/selectedArtistReducer.js","reducers/selectedGenreReducer.js","providers/ReduxProvider.js","providers/ThemeProvider.js","api/metalGeniusAPI.js","actions/index.js","selectors/index.js","components/ArtistBubble.js","components/ArtistsLayout.js","components/Card.js","components/ArtistCard.js","components/LongestWordCard.js","components/WordCloud.js","components/VocabularySizeCard.js","components/ArtistDashboard.js","components/LoadingSpinner.js","components/ArtistDialog.js","components/GenresList.js","components/App.js","index.js"],"names":["combineReducers","errors","state","Map","action","type","payload","matches","exec","requestName","requestState","set","delete","loading","createRequestAction","createSuccessAction","createFailureAction","api","apiReducer","aggregateData","artists","keyBy","artistStats","id","geniusArtists","newEntries","merge","genres","ImmutableSet","Set","forEach","genre","add","loadedGenres","selectedArtist","selectedGenre","keys","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReduxProvider","children","theme","responsiveFontSizes","createMuiTheme","palette","primary","main","ThemeProvider","instance","axios","create","baseURL","selectArtist","createLoadingSelector","actions","isEmpty","some","get","getArtistsOfGenre","createSelector","filter","toList","sortBy","artist","useStyles","makeStyles","bubble","position","height","width","margin","borderRadius","border","cursor","breakpoints","down","transform","backgroundColor","opacity","background","zIndex","top","right","bottom","left","transition","title","textAlign","fontSize","avatar","connect","classes","geniusData","toString","Skeleton","className","variant","image_url","name","onClick","Typography","component","Avatar","alt","src","root","display","alignItems","row","justifyContent","wrapper","fetchGeniusArtists","dispatch","getState","has","ids","getArtistsGeniusData","map","toJS","then","data","catch","error","useEffect","renderRow","key","Container","maxWidth","rows","size","push","slice","renderRows","header","content","flexDirection","Card","CardHeader","CardContent","dark","ArtistCard","url","Link","href","word","color","fontWeight","typography","minHeight","skeleton","LongestWordCard","useState","loadingDef","setLoadingDef","definition","setDefinition","fetch","response","json","Array","isArray","meaning","partsOfSpeechKeys","Object","length","firstMeaning","firstDefinition","Chip","label","WordCloud","words","minSize","options","fontSizes","colors","shadowArc","arc","text","description","icon","percentText","GreenUpArrow","props","style","green","RedDownArrow","red","VocabularySizeCard","averageSize","progress","setProgress","progressElement","useRef","moreThanAverage","comparison","Icon","percentDifference","Math","round","abs","timeout","setTimeout","clearTimeout","svgStyle","current","firstChild","strokeDashoffset","CircularProgress","value","thickness","ref","flexGrow","marginTop","rowItem","paper","padding","ArtistDashboard","stats","averageVocabulary","wordCounts","longestWord","vocabularySize","Grid","container","spacing","item","xs","sm","md","lg","xl","Paper","LoadingSpinner","useTheme","appBar","Transition","React","forwardRef","Slide","direction","loadingSelector","fetchArtistAnalysis","getArtistAnalysis","handleClose","Dialog","fullScreen","open","Boolean","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","list","listItem","listStyle","paddingBottom","unselectedItem","selectedItem","textDecoration","selectGenre","clsx","fetchArtists","fetchAggregateData","AppContainer","StrictMode","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98d24c98.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport errorsReducer from './errorsReducer';\r\nimport loadingReducer from './loadingReducer';\r\n\r\nexport default combineReducers({\r\n    errors: errorsReducer,\r\n    loading: loadingReducer\r\n});","import { Map } from 'immutable';\r\n\r\nexport default (state = Map(), action) => {\r\n    const { type, payload } = action;\r\n    const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\r\n\r\n    if (!matches) return state;\r\n\r\n    const [, requestName, requestState] = matches;\r\n\r\n    if (requestState === 'FAILURE') {\r\n        return state.set(requestName, payload);\r\n    } else {\r\n        return state.delete(requestName);\r\n    }\r\n};","import { Map } from 'immutable';\r\n\r\nexport default (state = Map(), action) => {\r\n    const { type } = action;\r\n    const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\r\n\r\n    if (!matches) return state;\r\n\r\n    const [, requestName, requestState] = matches;\r\n\r\n    return state.set(requestName, requestState === 'REQUEST');\r\n};","export const createRequestAction = (action) => {\r\n    return `${action}_REQUEST`;\r\n};\r\n\r\nexport const createSuccessAction = (action) => {\r\n    return `${action}_SUCCESS`;\r\n};\r\n\r\nexport const createFailureAction = (action) => {\r\n    return `${action}_FAILURE`;\r\n};","import { combineReducers } from 'redux';\r\nimport apiReducer from './apiReducer';\r\nimport aggregateDataReducer from './aggregateDataReducer';\r\nimport artistsReducer from './artistsReducer';\r\nimport artistStatsReducer from './artistStatsReducer';\r\nimport geniusArtistsReducer from './geniusArtistsReducer';\r\nimport genresReducer from './genresReducer';\r\nimport loadedGenresReducer from './loadedGenresReducer';\r\nimport selectedArtistReducer from './selectedArtistReducer';\r\nimport selectedGenreReducer from './selectedGenreReducer';\r\n\r\nexport default combineReducers({\r\n    api: apiReducer,\r\n    aggregateData: aggregateDataReducer,\r\n    artists: artistsReducer,\r\n    artistStats: artistStatsReducer,\r\n    geniusArtists: geniusArtistsReducer,\r\n    genres: genresReducer,\r\n    loadedGenres: loadedGenresReducer,\r\n    selectedArtist: selectedArtistReducer,\r\n    selectedGenre: selectedGenreReducer\r\n});","import { FETCH_AGGREGATE_DATA } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_AGGREGATE_DATA):\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","export const FETCH_SAMPLE_ARTISTS = 'FETCH_SAMPLE_ARTISTS';\r\nexport const FETCH_AGGREGATE_DATA = 'FETCH_AGGREGATE_DATA';\r\nexport const FETCH_ARTIST_ANALYSIS = 'FETCH_ARTIST_ANALYSIS';\r\nexport const FETCH_GENIUS_ARTISTS = 'FETCH_GENIUS_ARTISTS';\r\nexport const SELECT_GENRE = 'SELECT_GENRE';\r\nexport const LOAD_GENRE = 'LOAD_GENRE';\r\nexport const SELECT_ARTIST = 'SELECT_ARTIST';","import { Map } from 'immutable';\r\nimport { keyBy } from 'lodash';\r\nimport { FETCH_SAMPLE_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            return Map(keyBy(action.payload, 'id'));\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Map } from 'immutable';\r\nimport { FETCH_ARTIST_ANALYSIS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_ARTIST_ANALYSIS):\r\n            return state.set(action.payload.id, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Map } from 'immutable';\r\nimport { keyBy } from 'lodash';\r\nimport { FETCH_GENIUS_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = Map(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_GENIUS_ARTISTS):\r\n            const newEntries = Map(keyBy(action.payload, 'id'));\r\n            return state.merge(newEntries);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Set as ImmutableSet } from 'immutable';\r\nimport { FETCH_SAMPLE_ARTISTS } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = ImmutableSet(), action) => {\r\n    switch (action.type) {\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            const genres = new Set();\r\n            action.payload.forEach(({ genre }) => genres.add(genre));\r\n\r\n            return ImmutableSet(genres);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Set } from 'immutable';\r\nimport { LOAD_GENRE } from '../actions/types';\r\n\r\nexport default (state = Set(), action) => {\r\n    switch (action.type) {\r\n        case LOAD_GENRE:\r\n            return state.add(action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { SELECT_ARTIST } from '../actions/types';\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n        case SELECT_ARTIST:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { FETCH_SAMPLE_ARTISTS, SELECT_GENRE } from '../actions/types';\r\nimport { createSuccessAction } from '../utils/actionUtil';\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n\r\n        case createSuccessAction(FETCH_SAMPLE_ARTISTS):\r\n            const genres = new Set();\r\n            action.payload.forEach(({ genre }) => genres.add(genre));\r\n\r\n            for (const genre of genres.keys()) {\r\n                return genre;\r\n            }\r\n            break;\r\n        case SELECT_GENRE:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from '../reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n    reducers, \r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport const ReduxProvider = ({ children }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            {children}\r\n        </Provider>\r\n    );\r\n};","import React from 'react';\r\nimport { \r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n    ThemeProvider as MuiThemeProvider\r\n} from '@material-ui/core/styles';\r\n\r\nconst theme = responsiveFontSizes(createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#bb86fc'\r\n        }\r\n    }\r\n}));\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n    return (\r\n        <MuiThemeProvider theme={theme}>\r\n            {children}\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\nexport default ThemeProvider;","import axios from 'axios';\r\n\r\nconst baseURL = process.env.NODE_ENV === 'production' ? (\r\n    'https://metal-genius.herokuapp.com/'\r\n) : (\r\n    'http://localhost:3001'\r\n);\r\n\r\nconst instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport const getSampleArtists = () => {\r\n    return instance.get('/sample');\r\n};\r\n\r\nexport const getAggregateData = () => {\r\n    return instance.get('/artists/aggregate');\r\n};\r\n\r\nexport const getArtistsGeniusData = (ids) => {\r\n    return instance.get(`/artists/${ids}`);\r\n};\r\n\r\nexport const getArtistAnalysis = (id) => {\r\n    return instance.get(`/artists/${id}/lyrics`);\r\n};","import {\r\n    FETCH_SAMPLE_ARTISTS,\r\n    FETCH_AGGREGATE_DATA,\r\n    FETCH_ARTIST_ANALYSIS,\r\n    FETCH_GENIUS_ARTISTS,\r\n    LOAD_GENRE,\r\n    SELECT_GENRE,\r\n    SELECT_ARTIST\r\n} from './types';\r\n\r\nimport { \r\n    getSampleArtists,\r\n    getAggregateData,\r\n    getArtistsGeniusData,\r\n    getArtistAnalysis\r\n} from '../api/metalGeniusAPI';\r\n\r\nimport {\r\n    createRequestAction,\r\n    createSuccessAction,\r\n    createFailureAction\r\n} from '../utils/actionUtil';\r\n\r\nexport const fetchArtists = () => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_SAMPLE_ARTISTS) });\r\n\r\n    getSampleArtists()\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_SAMPLE_ARTISTS),\r\n            payload: data\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_SAMPLE_ARTISTS),\r\n            payload: 'There was an issue loading artist information.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const fetchAggregateData = () => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_AGGREGATE_DATA) });\r\n\r\n    getAggregateData()\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_AGGREGATE_DATA),\r\n            payload: data[0]\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_AGGREGATE_DATA),\r\n            payload: 'There was an issue loading aggregate artist data.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const fetchGeniusArtists = (artists) => (dispatch, getState) => {\r\n\r\n    const { selectedGenre, loadedGenres } = getState();\r\n\r\n    if (!loadedGenres.has(selectedGenre)) {\r\n        dispatch({ type: createRequestAction(FETCH_GENIUS_ARTISTS) });\r\n        dispatch({ type: LOAD_GENRE, payload: selectedGenre });\r\n\r\n        const ids = artists.map(({ id }) => id);\r\n\r\n        getArtistsGeniusData(ids.toJS())\r\n        .then(({ data }) => {\r\n            dispatch({\r\n                type: createSuccessAction(FETCH_GENIUS_ARTISTS),\r\n                payload: data\r\n            })\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: createFailureAction(FETCH_GENIUS_ARTISTS),\r\n                payload: 'There was an issue getting Genius artist data.'\r\n            })\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchArtistAnalysis = (id) => (dispatch) => {\r\n\r\n    dispatch({ type: createRequestAction(FETCH_ARTIST_ANALYSIS) });\r\n\r\n    getArtistAnalysis(id)\r\n    .then(({ data }) => {\r\n        dispatch({\r\n            type: createSuccessAction(FETCH_ARTIST_ANALYSIS),\r\n            payload: data\r\n        });\r\n    })\r\n    .catch(error => {\r\n        dispatch({\r\n            type: createFailureAction(FETCH_ARTIST_ANALYSIS),\r\n            payload: 'There was an issue getting lyrical data.'\r\n        });\r\n    });\r\n};\r\n\r\nexport const selectGenre = (genre) => {\r\n    return {\r\n        type: SELECT_GENRE,\r\n        payload: genre\r\n    };\r\n};\r\n\r\nexport const selectArtist = (id) => {\r\n    return {\r\n        type: SELECT_ARTIST,\r\n        payload: id\r\n    };\r\n};","import { createSelector } from 'reselect';\r\n\r\n/* API Util */\r\n\r\nexport const createLoadingSelector = (actions) => (state) => {\r\n\r\n    // special case where the app is first loading and for the first\r\n    // render the loading reducer is empty\r\n    if (state.api.loading.isEmpty()) { return true; }\r\n\r\n    // returns true if one of the actions supplied is in the loading state\r\n    return actions.some(action => state.api.loading.get(action));\r\n};\r\n\r\n/* Selectors */\r\n\r\nconst getSelectedGenre = (state) => state.selectedGenre;\r\nconst getArtists = (state) => state.artists;\r\n\r\nexport const getArtistsOfGenre = createSelector(\r\n    [ getSelectedGenre, getArtists ],\r\n    (selectedGenre, artists) => {\r\n        const artistsList = artists.filter(({ genre }) => genre === selectedGenre).toList();\r\n        return artistsList.sortBy(({ artist }) => artist);\r\n    }\r\n);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Typography } from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport { selectArtist } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    bubble: {\r\n        position: 'relative',\r\n        height: 100,\r\n        width: 100,\r\n        margin: 8,\r\n        borderRadius: '50%',\r\n        border: '2px solid gray',\r\n        cursor: 'pointer',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)'\r\n        },\r\n        '&:hover > div': {\r\n            backgroundColor: 'rgba(0,0,0,0.7)',\r\n        },\r\n        '&:hover > span': {\r\n            opacity: 1\r\n        }\r\n    },\r\n    background: {\r\n        zIndex: 1,\r\n        borderRadius: '50%',\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        backgroundColor: 'rgba(0,0,0,0.0)',\r\n        transition: 'background-color 0.3s ease-in-out'\r\n    },\r\n    title: {\r\n        opacity: 0,\r\n        zIndex: 2,\r\n        textAlign: 'center',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        fontSize: '0.8rem',\r\n        transition: 'opacity 0.3s ease-in-out'\r\n    },\r\n    avatar: {\r\n        height: '100%',\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst ArtistBubble = ({\r\n    // props\r\n    id,\r\n    artists,\r\n\r\n    // actions\r\n    selectArtist\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const geniusData = artists.get(id.toString());\r\n\r\n    if (!geniusData) {\r\n        return <Skeleton className={classes.bubble} variant=\"circle\" />;\r\n    }\r\n\r\n    const handleClick = () => {\r\n        selectArtist(id);\r\n    };\r\n\r\n    const {\r\n        image_url,\r\n        name\r\n    } = geniusData;\r\n\r\n    return (\r\n        <div\r\n            className={classes.bubble}\r\n            onClick={handleClick}\r\n        >\r\n            <div \r\n                className={classes.background}\r\n            >\r\n            </div>\r\n            <Typography\r\n                component=\"span\"\r\n                className={classes.title}\r\n            >\r\n                {name}\r\n            </Typography>\r\n            <Avatar\r\n                className={classes.avatar}\r\n                alt={name}\r\n                src={image_url}\r\n            >\r\n                &nbsp;\r\n            </Avatar>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ geniusArtists }) => {\r\n    return {\r\n        artists: geniusArtists\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { selectArtist }\r\n)(ArtistBubble);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\nimport ArtistBubble from './ArtistBubble';\r\nimport { fetchGeniusArtists } from '../actions';\r\nimport { getArtistsOfGenre } from '../selectors';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    row: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    avatar: {\r\n        height: 100,\r\n        width: 100,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.1)'\r\n        }\r\n    },\r\n    wrapper: {\r\n        height: 100,\r\n        width: 100,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 50,\r\n            width: 50\r\n        },\r\n        margin: 4,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        borderRadius: '50%',\r\n        transition: 'all .2s',\r\n        '&:hover': {\r\n            height: 110,\r\n            width: 110,\r\n            [theme.breakpoints.down('sm')]: {\r\n                height: 55,\r\n                width: 55\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\n/**\r\n *  This component arranges the given list of artists\r\n *  in a circle shaped grid of bubbles. It is hardcoded to accept\r\n *  5 rows totalling 21 bubbles (3 bubbles in the top and bottom, 5 bubbles else).\r\n * \r\n * TODO: Accept any some number of artists and arrange them in a circle grid. Or add\r\n * TODO: some pagination capability.\r\n */\r\nconst ArtistsLayout = ({\r\n    // props\r\n    artists,\r\n    genre,\r\n\r\n    // actions\r\n    fetchGeniusArtists\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        fetchGeniusArtists(artists)\r\n    }, [genre, fetchGeniusArtists, artists])\r\n\r\n    const renderRows = () => {\r\n        const rows = [];\r\n\r\n        // sanity check, there should be exactly 21 artists\r\n        if (artists.size === 21) {\r\n            rows.push(renderRow(artists.slice(0, 3), 0));\r\n            rows.push(renderRow(artists.slice(3, 8), 1));\r\n            rows.push(renderRow(artists.slice(8, 13), 2));\r\n            rows.push(renderRow(artists.slice(13, 18), 3));\r\n            rows.push(renderRow(artists.slice(18), 4));\r\n        }\r\n\r\n        return rows;\r\n    };\r\n\r\n    const renderRow = (artists, row) => {\r\n        return (\r\n            <div key={row} className={classes.row}>\r\n                {artists.map(({ id }) => (\r\n                    <ArtistBubble\r\n                        key={id}\r\n                        id={id}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container maxWidth=\"lg\">\r\n                {renderRows()}\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        artists: getArtistsOfGenre(state),\r\n        genre: state.selectedGenre\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchGeniusArtists })(ArtistsLayout);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Card as MuiCard,\r\n    CardHeader,\r\n    CardContent\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        height: '20%',\r\n        textAlign: 'center',\r\n        backgroundColor: theme.palette.primary.main\r\n    },\r\n    content: {\r\n        height: '80%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center'\r\n    }\r\n}));\r\n\r\nconst Card = ({\r\n    title,\r\n    content\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MuiCard>\r\n            <CardHeader \r\n                className={classes.header}\r\n                title={title}\r\n            />\r\n            <CardContent className={classes.content}>\r\n                {content}\r\n            </CardContent>\r\n        </MuiCard>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Avatar,\r\n    Typography,\r\n    Link\r\n} from '@material-ui/core';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        border: `2px solid ${theme.palette.primary.dark}`,\r\n        height: 150,\r\n        width: 150\r\n    }\r\n}));\r\n\r\nconst ArtistCard = ({\r\n    artist\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const { \r\n        name,\r\n        image_url,\r\n        url\r\n    } = artist;\r\n\r\n    return (\r\n        <Card\r\n            title={name}\r\n            content={\r\n                <>\r\n                    <Avatar\r\n                        className={classes.avatar}\r\n                        src={image_url}\r\n                        variant=\"circle\"\r\n                    />\r\n                    <div>\r\n                        <Typography>\r\n                            <Link href={url}>\r\n                                Genius Profile\r\n                            </Link>\r\n                        </Typography>\r\n                    </div>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default ArtistCard;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { \r\n    Chip,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    word: {\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    },\r\n    typography: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        maxWidth: 400,\r\n        minHeight: 100,\r\n    },\r\n    skeleton: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst LongestWordCard = ({\r\n    word\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const [loadingDef, setLoadingDef] = useState(true);\r\n    const [definition, setDefinition] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch(`https://api.dictionaryapi.dev/api/v1/entries/en/${word}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (Array.isArray(data)) {\r\n                const [{ meaning }] = data;\r\n                const partsOfSpeechKeys = Object.keys(meaning);\r\n\r\n                if (partsOfSpeechKeys.length > 0) {\r\n                    const firstMeaning = meaning[partsOfSpeechKeys[0]];\r\n\r\n                    if (firstMeaning.length > 0) {\r\n                        const firstDefinition = firstMeaning[0].definition;\r\n                        setDefinition(firstDefinition);\r\n                    }\r\n                }\r\n            }\r\n\r\n            setLoadingDef(false);\r\n        });\r\n    }, [word]);\r\n\r\n    return (\r\n        <Card\r\n            title=\"Longest Word\"\r\n            content={\r\n                <>\r\n                    <Chip\r\n                        className={classes.word}\r\n                        color=\"primary\"\r\n                        label={word}\r\n                    />\r\n\r\n                    <Typography\r\n                        className={classes.typography}\r\n                        variant=\"body1\"\r\n                    >\r\n                        {loadingDef ? (\r\n                            <>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                                <Skeleton className={classes.skeleton}/>\r\n                            </>\r\n                        ) : (\r\n                            definition\r\n                        )}\r\n                    </Typography>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default LongestWordCard;","import React from 'react';\r\nimport ReactWordCloud from 'react-wordcloud';\r\n\r\nconst WordCloud = ({\r\n    title, words\r\n}) => {\r\n\r\n    const colors = [\r\n        '#BB86FC',\r\n        '#3C91E6',\r\n        '#30C5FF',\r\n        '#553739'\r\n    ]\r\n\r\n    return (\r\n        <ReactWordCloud\r\n            key={title}\r\n            words={words}\r\n            minSize={[500, 300]}\r\n            options={{\r\n                fontSizes: [10, 80],\r\n                colors\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default WordCloud;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, CircularProgress } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Card from './Card';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    content: {\r\n        position: 'relative',\r\n        height: 225,\r\n        width: 225,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        textAlign: 'center'\r\n    },\r\n    shadowArc: {\r\n        position: 'absolute',\r\n        color: '#424242',\r\n        zIndex: 1\r\n    },\r\n    arc: {\r\n        position: 'absolute',\r\n        zIndex: 2\r\n    },\r\n    text: {\r\n        zIndex: 3\r\n    },\r\n    description: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        zIndex: 3\r\n    },\r\n    icon: {\r\n        height: '0.85em'\r\n    },\r\n    percentText: {\r\n        fontSize: '0.85rem'\r\n    }\r\n}));\r\n\r\nconst GreenUpArrow = (props) => {\r\n    return (\r\n        <KeyboardArrowUpIcon\r\n            style={{ color: green[500] }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst RedDownArrow = (props) => {\r\n    return (\r\n        <KeyboardArrowDownIcon\r\n            style={{ color: red[500] }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst VocabularySizeCard = ({\r\n    size,\r\n    averageSize\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = useState(0);\r\n    const progressElement = useRef(null);\r\n    const moreThanAverage = size > averageSize ? true : false;\r\n    const comparison = moreThanAverage ? 'more' : 'less';\r\n    const Icon = moreThanAverage ? GreenUpArrow : RedDownArrow;\r\n    const percentDifference = Math.round((Math.abs(size - averageSize) / averageSize) * 100);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setProgress(percentDifference);\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearTimeout(timeout);\r\n        }\r\n    }, [percentDifference]);\r\n\r\n    useEffect(() => {\r\n        if (!moreThanAverage && progressElement) {\r\n            // better way to do this?\r\n            const svgStyle = progressElement.current.firstChild.firstChild.style;\r\n            if (svgStyle.strokeDashoffset[0] !== '-') {\r\n                svgStyle.strokeDashoffset = '-' + svgStyle.strokeDashoffset;\r\n            }\r\n        }\r\n    }, [moreThanAverage, progress]);\r\n\r\n    const renderProgressBars = () => {\r\n        return (\r\n            <>\r\n                <CircularProgress\r\n                    className={classes.shadowArc}\r\n                    variant=\"static\"\r\n                    value={100}\r\n                    size=\"100%\"\r\n                    thickness={1.5}\r\n                />\r\n                <CircularProgress\r\n                    ref={progressElement}\r\n                    className={classes.arc}\r\n                    variant=\"static\"\r\n                    value={progress}\r\n                    size=\"100%\"\r\n                    thickness={1.5}\r\n                />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <>\r\n                <Typography\r\n                    className={classes.text}\r\n                    variant=\"h3\"\r\n                >\r\n                    {size}\r\n                </Typography>\r\n                <div className={classes.description}>\r\n                    <Icon \r\n                        classes={{\r\n                            root: classes.icon\r\n                        }}\r\n                    />\r\n                    <Typography\r\n                        className={classes.percentText}\r\n                        variant=\"body1\"\r\n                    >\r\n                        {`${percentDifference}% ${comparison} than average`}\r\n                    </Typography>\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            title=\"Vocabulary Size\"\r\n            content={\r\n                <>\r\n                    <div className={classes.content}>\r\n                        {renderProgressBars()}\r\n                        {renderContent()}\r\n                    </div>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default VocabularySizeCard;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Grid, Paper } from '@material-ui/core';\r\nimport ArtistCard from './ArtistCard';\r\nimport LongestWordCard from './LongestWordCard';\r\nimport WordCloud from './WordCloud';\r\nimport VocabularySizeCard from './VocabularySizeCard';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: 32\r\n    },\r\n    rowItem: {\r\n        height: 350,\r\n        '& > div': {\r\n            height: '100%',\r\n            backgroundColor: '#585858'\r\n        },\r\n    },\r\n    paper: {\r\n        padding: 4,\r\n        textAlign: 'center',\r\n    }\r\n}));\r\n\r\nconst ArtistDashboard = ({\r\n    aggregateData,\r\n    artist,\r\n    stats\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n    const { averageVocabulary } = aggregateData;\r\n    const { name } = artist;\r\n    const { wordCounts, longestWord, vocabularySize } = stats;\r\n    const words = wordCounts.map(([text, value]) => ({ text, value }));\r\n\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\">\r\n            <Grid container spacing={2}>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <ArtistCard\r\n                        artist={artist}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <LongestWordCard\r\n                        word={longestWord}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={4}>\r\n                    <VocabularySizeCard\r\n                        size={vocabularySize}\r\n                        averageSize={averageVocabulary}\r\n                    />\r\n                </Grid>\r\n                <Grid className={classes.rowItem} item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <WordCloud\r\n                            title={name}\r\n                            words={words}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ArtistDashboard;","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport ScaleLoader from 'react-spinners/ScaleLoader';\r\n//import { CircularProgress } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\nconst LoadingSpinner = () => {\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ScaleLoader\r\n                loading={true}\r\n                height={50}\r\n                width={10}\r\n                color={theme.palette.primary.main}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Slide\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ArtistDashboard from './ArtistDashboard';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { selectArtist, fetchArtistAnalysis } from '../actions';\r\nimport { FETCH_ARTIST_ANALYSIS } from '../actions/types';\r\nimport { createLoadingSelector } from '../selectors';\r\n\r\nconst useStyles = makeStyles({\r\n    appBar: {\r\n        position: 'relative'\r\n    },\r\n    content: {\r\n        height: '100%'\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst ArtistDialog = ({\r\n    // props\r\n    loading,\r\n    id,\r\n    aggregateData,\r\n    artist,\r\n    stats,\r\n\r\n    // actions\r\n    selectArtist,\r\n    fetchArtistAnalysis\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            fetchArtistAnalysis(id);\r\n        }\r\n    }, [id, fetchArtistAnalysis]);\r\n\r\n    const handleClose = () => {\r\n        selectArtist('');\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            fullScreen\r\n            open={Boolean(id)}\r\n            onClose={handleClose}\r\n            TransitionComponent={Transition}\r\n        >\r\n            <AppBar\r\n                className={classes.appBar}\r\n                color=\"default\"\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            \r\n            {\r\n                Boolean(id) &&\r\n                <div className={classes.content}>\r\n                    {loading ? (\r\n                        <LoadingSpinner />\r\n                    ) : (\r\n                        <ArtistDashboard\r\n                            aggregateData={aggregateData}\r\n                            artist={artist}\r\n                            stats={stats}\r\n                        />\r\n                    )}\r\n                </div>\r\n            }\r\n        </Dialog>\r\n    )\r\n};\r\n\r\nconst loadingSelector = createLoadingSelector([FETCH_ARTIST_ANALYSIS]);\r\nconst mapStateToProps = (state) => {\r\n\r\n    const {\r\n        selectedArtist,\r\n        aggregateData,\r\n        geniusArtists,\r\n        artistStats\r\n    } = state;\r\n\r\n    return {\r\n        loading: loadingSelector(state),\r\n        id: selectedArtist,\r\n        aggregateData,\r\n        artist: geniusArtists.get(selectedArtist.toString()),\r\n        stats: artistStats.get(selectedArtist.toString())\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { selectArtist, fetchArtistAnalysis }\r\n)(ArtistDialog);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { selectGenre } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    list: {\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        margin: 0,\r\n        padding: 0,\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        }\r\n    },\r\n    listItem: {\r\n        listStyle: 'none',\r\n        fontSize: '1rem',\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '0.65rem'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            paddingBottom: 8\r\n        }\r\n    },\r\n    unselectedItem: {\r\n        cursor: 'pointer',\r\n        transition: 'all .2s ease-in-out',\r\n        '&:hover': {\r\n            transform: 'scale(1.3)'\r\n        }\r\n    },\r\n    selectedItem: {\r\n        transform: 'scale(1.3)',\r\n        fontWeight: 'bold',\r\n        textDecoration: 'underline'\r\n    }\r\n}));\r\n\r\nconst GenresList = ({\r\n    // props\r\n    selectedGenre,\r\n    genres,\r\n\r\n    // actions\r\n    selectGenre\r\n}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderList = () => {\r\n        return genres.map(genre => (\r\n            <Typography\r\n                key={genre}\r\n                className={clsx({\r\n                    [classes.listItem]: true,\r\n                    [classes.unselectedItem]: genre !== selectedGenre,\r\n                    [classes.selectedItem]: genre === selectedGenre\r\n                })}\r\n                component=\"li\"\r\n                onClick={() => selectGenre(genre)}\r\n            >\r\n                {genre}\r\n            </Typography>\r\n        ))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ul className={classes.list}>\r\n                {renderList()}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedGenre, genres }) => {\r\n    return {\r\n        selectedGenre,\r\n        genres\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectGenre })(GenresList);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fetchArtists, fetchAggregateData } from '../actions';\nimport { FETCH_SAMPLE_ARTISTS, FETCH_AGGREGATE_DATA } from '../actions/types';\nimport { createLoadingSelector } from '../selectors';\nimport ArtistsLayout from './ArtistsLayout';\nimport ArtistDialog from './ArtistDialog';\nimport GenresList from './GenresList';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-evenly'\n    }\n}));\n\nconst App = ({\n    // props\n    loading,\n\n    // actions\n    fetchArtists,\n    fetchAggregateData\n}) => {\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        fetchArtists();\n        fetchAggregateData();\n    }, [fetchArtists, fetchAggregateData]);\n\n    return (\n        <div className={classes.root}>\n            {loading ? (\n                <LoadingSpinner />\n            ) : (\n                <>\n                    <GenresList />\n                    <ArtistsLayout />\n                    <ArtistDialog />\n                </>\n            )}\n        </div>\n    );\n};\n\nconst loadingSelector = createLoadingSelector([FETCH_SAMPLE_ARTISTS, FETCH_AGGREGATE_DATA]);\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: loadingSelector(state)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { fetchArtists, fetchAggregateData }\n)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ReduxProvider } from './providers/ReduxProvider';\nimport ThemeProvider from './providers/ThemeProvider';\nimport App from './components/App';\n\nconst AppContainer = () => {\n    return (\n        <React.StrictMode>\n            <ReduxProvider>\n                <ThemeProvider>\n                    <CssBaseline />\n                    <App />\n                </ThemeProvider>\n            </ReduxProvider>\n        </React.StrictMode>\n    );\n};\n\nReactDOM.render(\n    <AppContainer />,\n    document.getElementById('root')\n);"],"sourceRoot":""}